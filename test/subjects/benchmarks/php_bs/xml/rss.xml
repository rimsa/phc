<?xml version="1.0"?>
<!-- RSS generated by UserLand Frontier v9.0 on Fri, 14 Nov 2003 17:43:09 GMT -->
<rss version="2.0" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule">
	<channel>
		<title>PHP Everywhere</title>
		<link>http://php.weblogs.com/</link>
		<description>Daily news, articles and free source code on PHP, the popular web scripting language, and other Web technologies.</description>
		<creativeCommons:license>http://creativecommons.org/licenses/by-nc/1.0/</creativeCommons:license>
		<language>en-us</language>
		<pubDate>Mon, 02 Dec 2002 08:00:00 GMT</pubDate>
		<lastBuildDate>Tue, 03 Dec 2002 02:06:38 GMT</lastBuildDate>
		<docs>http://backend.userland.com/rss</docs> 
		<generator>UserLand Frontier v9.0</generator>
		<category domain="http://www.weblogs.com/rssUpdates/changes.xml">rssUpdates</category>
		<managingEditor>jlim@natsoft.com.my (John Lim)</managingEditor>
		<webMaster>heyjohnlim@yahoo.com (John Lim)</webMaster>
		<item>
			<title>NASA Software Engineering Laboratory</title>
			<link>http://sel.gsfc.nasa.gov/website/documents/online-doc.htm</link>
			<description>A list of software engineering documents derived from over 20 years of software development practice at NASA. Here are the ones i found most useful:
&lt;p&gt;
-Recommended Approach to Software Development &lt;a href=http://sel.gsfc.nasa.gov/website/documents/online-doc/81-305new.pdf&gt;PDF&lt;/a&gt;
&lt;p&gt;
-Manager&apos;s Handbook for Software Development &lt;a href=http://sel.gsfc.nasa.gov/website/documents/online-doc/84-101.pdf&gt;PDF&lt;/a&gt;
&lt;p&gt;
-Software Process Improvement Guide &lt;a href=http://sel.gsfc.nasa.gov/website/documents/online-doc/95-102.pdf&gt;PDF&lt;/a&gt;
&lt;p&gt;
PS: These methods are an insight into how to manage a very big project. For smaller projects, many of these details are bureaucracy and are not needed. I found the requirements and planning parts particularly useful as it has several checklists on things to consider...
&lt;p&gt;
&lt;img src=&quot;http://static.userland.com/shortcuts/images/zeldman/bbll.gif&quot;&gt;</description>
			<category>998</category>
			<guid>http://php.weblogs.com/2003/11/13#a2114</guid>
			</item>
		<item>
			<title>PEAR2: The interface is the framework</title>
			<link>http://php.weblogs.com/2003/11/11#a3125</link>
			<description>&lt;i&gt;PEAR1 is now suffering from the fact that it focused from a long period of
building technical foundations without planning the community growth at the
same time.&lt;/i&gt; -- Lukas Smith.
&lt;p&gt;
Now that the cat is out of the bag about PEAR&apos;s problems, I will give my 2 cents worth. 
&lt;p&gt;
Firstly, I want to say that I am a PEAR user, but not a PEAR developer. I do use code from PEAR, everyday. There is some first class code in there. But yes I do see problems, and I also have a radical solution at the very end of this essay.
&lt;p&gt;
The biggest problem IMHO with PEAR is the arbitrary way things are apparently run. Why is one class accepted, and another rejected? If it is because they do the same thing, then why are there so many classes that do the same thing in PEAR? 
&lt;p&gt;
My perception is that
&lt;ul&gt; 
&lt;li&gt;there is no planning except for flavour of the day
&lt;li&gt;there are egos in the community, so people introduce new classes rather than rewrite existing ones to add new functionality 
&lt;li&gt; poor design in some of the original classes makes it impractical to extend the original classes
&lt;li&gt; the quality of PEAR is uneven, brilliant gems combined with duds - and the problem is that the duds begin with the &lt;a href=http://news.php.net/article.php?group=php.pear.dev&amp;article=23410&gt;base classes (PEAR and PEAR_Error)&lt;/a&gt;
&lt;li&gt;
&lt;/ul&gt;
&lt;p&gt;
How can things improve? Obviously PEAR2 must be designed to grow with the community. One way to grow in an open source world (if there is no leader with the stature of Linus in the community) is to give everyone a chance to contribute their own code fairly, without the arbitrariness that we see today.
&lt;p&gt;
&lt;img src=http://images.google.com/images?q=tbn:4e6IwJZPGKoC:www.dnaco.net/~ivanjs/images/police.gif align=right&gt;In the Perl world, we have CPAN, where there is no thought police telling you that your code is not acceptable - you just register as a developer, declare a namespace, and upload. Yes there is lots of code duplication, and yes there is no coding standard - but i do perceive that it is fair.
&lt;p&gt;
I have a suggestion for PEAR. I think they need to be more open, and allow multiple people to develop similar classes for the same category. What the PEAR group could do is standardize the API&apos;s for specific categories. This API defines a minimum inter-operatable subset of code for a specific category. Poor documentation will be less of an issue if all contributed code share a common base API.
&lt;p&gt;
I can see some similar classes in PEAR share common APIs informally, but it would be better if it were standardized, so it is less arbitrary and more inclusive. In fact, PHP5 has a good way of enforcing this contract with the &lt;i&gt;implements &lt;/i&gt;keyword. The launch of PHP5 is also a good time to start, because we can finally put PEAR exceptions to sleep and use built-in exceptions.
&lt;p&gt;&lt;p&gt;
Now here comes the &lt;b&gt;really radical suggestion&lt;/b&gt; - if your contributed class conforms to that category&apos;s unit tests, it should be accepted into PEAR. No ifs, no buts, no thought police. And how would you pick which class to use if there are 10 implementations? Let the PHP community decide! Votes or download statistics could be displayed to &quot;fairly&quot; quantify the best code contribution for a category.
&lt;p&gt;&lt;p&gt;
Lastly, I want to remind everyone that standardizing on a common API does not inhibit creativity, provided that the API is sensibly chosen. For example, ADOdb and MDB both have a PEAR DB emulation layer. In fact common APIs do encourage innovation within a shared framework (eg. the BSD forks go in different directions but share code).
&lt;p&gt;&lt;p&gt;Thanks for listening.
&lt;p&gt;
&lt;img src=&quot;http://static.userland.com/shortcuts/images/zeldman/caryg.gif&quot;&gt;</description>
			<category>997-2003</category>
			<guid>http://php.weblogs.com/2003/11/11#a3125</guid>
			</item>
		<item>
			<title>Today I ran JBoss for the first time</title>
			<link>http://php.weblogs.com/2003/11/11#a3128</link>
			<description>Another personal milestone i just wanted to note before i forget.</description>
			<category>997-2003</category>
			<guid>http://php.weblogs.com/2003/11/11#a3128</guid>
			</item>
		<item>
			<title>Smash the Windows</title>
			<link>http://www.guardian.co.uk/comment/story/0,3604,1078616,00.html</link>
			<description>As our society becomes ever more dependent on information technology, the gulf between those who understand computers and those who don&apos;t will get wider and wider. In 50 years, perhaps much less, the ability to read and write code will be as essential for professionals of every stripe as the ability to read and write a human language is today. If your children&apos;s children can&apos;t speak the language of the machines, they will have to get a manual job - if there are any left -- Dylan Evans.
&lt;p&gt;
&lt;img src=&quot;http://static.userland.com/shortcuts/images/zeldman/bebe.gif&quot;&gt;</description>
			<category>997-2003</category>
			<guid>http://php.weblogs.com/2003/11/11#a3117</guid>
			</item>
		<item>
			<title>A Turning point for PEAR?</title>
			<link>http://php.weblogs.com/2003/11/10#a3118</link>
			<description>A posting in the php.pear.dev newsgroup by one of PEAR&apos;s leading developers. I think this is a very honest assessment, and I&apos;m hopeful about this.
&lt;pre&gt;
&gt; From: Xavier Noguer [mailto:xnoguer#xavier-noguer.com]
&gt; Sent: Saturday, November 08, 2003 3:41 PM
 
&gt; Martin Jansen &amp;lt;mj#php.net&gt; escribi&amp;oacute;
&gt; 
&gt; &gt; (http://pear.php.net/manual/en/developers.contributing.php)
&gt; &gt;
&gt; &gt; It is pretty funny to see how much developers have actually read the
&gt; &gt; &quot;Developers Guide&quot; ...
&gt; 
&gt;  I&apos;ve read that guide. I just don&apos;t seem to be able to take it seriously
&gt; when
&gt; it lists requirements that have never, as far as I know, been voted by the
&gt; pear group or the developer community at large, such as regressions tests
&gt; (http://cvs.php.net/diff.php/peardoc/en/guide/developers/contributing.xml?
&gt; r1=1.8&amp;r2=1.9&amp;ty=h)
&lt;p&gt;I agree here.
While previous mistakes don&apos;t make a wrong a right, I think our whole manual
lacks any consistent concept of what we really feel needs to happen when and
where.
&lt;p&gt;Anyways we have a bunch of messes that are a result of the long period of
limited peer review, followed by a period of package inflation, followed by
the today ruling confusion.
&lt;p&gt;I think its time we fix our standards by starting from a clean slate with a
PEAR2. There we can think about how to best deal with our developer and
users base and how to great the best possible code in a PHP version which
actually supports our needs for OOP.
&lt;p&gt;PEAR1 should of course be maintained as we all have an interest to keep that
code running and to use PEAR1 as a momentum towards a PEAR2 which build on
the past experience.
&lt;p&gt;&amp;lt;rant&gt;
PEAR1 is now suffering from the fact that it focused from a long period of
building technical foundations without planning the community growth at the
same time. This has lead to numerous problems and is making us very
inefficient. Of course PEAR1 has a lot to offer, but I don&apos;t think we are
scaling well and past mistakes seem to haunt us more and more, which we
don&apos;t seem to be able to fix. So I think we need to recognize our past which
we of course need to maintain to remain credible, but at the same time we
should work to build a more scalable PEAR2 in which we can address our
issues on a clean slate.
&amp;lt;/rant&gt;
&lt;p&gt;&gt;  Would you be so kind to point me to the pear group document or public
&gt; discussion in which this requirement was approved?
&lt;p&gt;There is no such decision I can remember.
As George pointed out we discussed this point in Amsterdam, however I don&apos;t
remember that anyone decided on requiring documentation at first commit.
However our decisions there were mostly only concepts and not complete.
Anyways maybe someone should check when this was commited anyways.
&lt;p&gt;Regards,
Lukas Smith
&lt;/pre&gt;
&lt;p&gt;
&lt;img src=&quot;http://static.userland.com/shortcuts/images/zeldman/bluey.gif&quot;&gt;</description>
			<category>997-2003</category>
			<guid>http://php.weblogs.com/2003/11/10#a3118</guid>
			</item>
		<item>
			<title>Is Novell-SuSE deal a brilliant Big Blue power play?</title>
			<link>http://techupdate.zdnet.com/techupdate/stories/main/novell_suse.html</link>
			<description>Perhaps the most interesting take on the Novell-SuSE deal is the above link. What has been missed by other commentators is that this is a tri-partite agreement with IBM. David Berlind clarifies a lot of things, even if it is still not the full picture.
&lt;p&gt;
Red Hat is also not standing still, abandoning its hobbyist roots to sell only to Enterprises. As &lt;a href=http://infoworld.com/article/03/11/06/HNredhatfedora_1.html&gt;Bruce Perens says&lt;/a&gt;, &quot;&lt;i&gt;The open source community is supposed to produce Fedora so Red Hat can put a stamp on it and charge lots of money for it&lt;/i&gt;.&quot; 
&lt;p&gt;
Does anyone have any recommendations for free Linux distros? Ease of installation and use are more important to me than power (hey, the first computer i ever bought was a Mac.)
&lt;p&gt;
PS: Bj&amp;ouml;rn Schotte has some &lt;a href=http://www.phpconference.de/2003/photos_en.php&gt;groovy pictures&lt;/a&gt; of the recent PHP Conference 2003 in Germany.
&lt;p&gt;
&lt;img src=&quot;http://static.userland.com/shortcuts/images/zeldman/dukem.gif&quot;&gt;</description>
			<category>997-2003</category>
			<guid>http://php.weblogs.com/2003/11/07#a3107</guid>
			</item>
		<item>
			<title>ADOdb 4.02 released with PHP5 suppport</title>
			<link>http://php.weblogs.com/adodb#downloads</link>
			<description>Been playing around with PHP5. ADOdb 4.02 now works transparently with both PHP4 and PHP5. If PHP5 is detected then the following features will be automatically enabled:
&lt;p&gt;&lt;b&gt;Support for PHP5 iterator overloading&lt;/b&gt;
&lt;p&gt;&lt;pre&gt;
  $rs = $DB-&gt;Execute(&quot;select * from table&quot;);&lt;br&gt;
  foreach($rs as $row =&gt; $fields) &amp;#123; var_dump($fields); &amp;#125;
&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Support for PHP5 exceptions&lt;/b&gt;
&lt;p&gt;Just include adodb-exceptions.inc.php and you can now catch exceptions on connection and execute errors as they occur.
&lt;p&gt;&lt;pre&gt;
include(&quot;../adodb-exceptions.inc.php&quot;); 
include(&quot;../adodb.inc.php&quot;);	 
try &amp;#123; 
	$db = NewADOConnection(&quot;oci8&quot;); 
	$db-&gt;Connect(&apos;&apos;,&apos;scott&apos;,&apos;bad-password&apos;); 
&amp;#125; catch (exception $e) &amp;#123; 
	var_dump($e); 
&amp;#125; 
&lt;/pre&gt;
&lt;p&gt;&lt;p&gt;
I managed to surprise myself, the PHP5 iterator code is backward compatible with PHP4, even though the IMPLEMENTS keyword is illegal in PHP4, thanks to the magic of includes. 
&lt;p&gt;
And IMHO, the PHP5 iterator implementation with &lt;i&gt;IteratorAggregate &lt;/i&gt;and &lt;i&gt;Iterator&lt;/i&gt;, though powerful, is too complicated - certainly not in the spirit of PHP.
&lt;p&gt;
&lt;img src=&quot;http://static.userland.com/shortcuts/images/zeldman/57.gif&quot;&gt;</description>
			<category>997-2003</category>
			<guid>http://php.weblogs.com/2003/11/05#a3100</guid>
			</item>
		<item>
			<title>PHP 4.3.4</title>
			<link>http://www.php.net/release_4_3_4.php</link>
			<description>&lt;i&gt;After a lengthy QA process, PHP 4.3.4 is finally out!
This is a medium size maintenance release, with a fair number of bug fixes. All users are encouraged to upgrade to 4.3.4. 
&lt;p&gt;
&lt;b&gt;Bugfix release&lt;/b&gt; &lt;br&gt;
PHP 4.3.4 contains, among others, following important fixes, additions and improvements: 
&lt;p&gt;
Fixed disk_total_space() and disk_free_space() under FreeBSD.  &lt;br&gt;
Fixed FastCGI being unable to bind to a specific IP.  &lt;br&gt;
Fixed several bugs in mail() implementation on win32.  &lt;br&gt;
Fixed crashes in a number of functions.  &lt;br&gt;
Fixed compile failure on MacOSX 10.3 Panther. &lt;br&gt; 
Over 60 various bug fixes!  &lt;br&gt;&lt;/i&gt;
&lt;p&gt;The bug-fix that most concerns me most is this one: 
&lt;p&gt;
&lt;code&gt;Fixed bug 25404 (ext/pgsql: open transactions not closed when script ends). 
&lt;/code&gt;
&lt;p&gt;
In our early days with PHP, we used MySQL a lot. Nowadays, most of our PHP work is with PostgreSQL and Oracle (with the occasional MSSQL project). MySQL is still a good database, but without triggers and views, it no longer meets our company&apos;s needs.</description>
			<category>997-2003</category>
			<guid>http://php.weblogs.com/2003/11/04#a3092</guid>
			</item>
		<item>
			<title>Sun, Zend integrate PHP with Sun&apos;s Web server</title>
			<link>http://www.infoworld.com/article/03/11/03/HNsunzend_1.html?source=rss&amp;url=http://www.infoworld.com/article/03/11/03/HNsunzend_1.html</link>
			<description>&lt;i&gt;Zend, oversees the development of PHP and also sells a commercial implementation of the technology. On Monday it released two products that integrate with Version 6.1 of Sun&apos;s Java System Web Server, allowing companies to deploy PHP on Sun&apos;s software. (The Java System Web Server was known previously as the Sun ONE Web Server.) 
&lt;p&gt;
The two products are the PHP Enabler, which is intended to let PHP programs run smoothly on Sun&apos;s Web server, and the Zend Performance Suite, which uses code acceleration, content caching and other software tricks to improve the performance of PHP on the Sun platform, the companies said. &lt;/i&gt;
&lt;p&gt;
&lt;img src=&quot;http://static.userland.com/shortcuts/images/zeldman/aca.gif&quot;&gt;</description>
			<category>997-2003</category>
			<guid>http://php.weblogs.com/2003/11/04#a3088</guid>
			</item>
		<item>
			<title>Icky Sticky Leaky PHPloat</title>
			<link>http://php.weblogs.com/2003/11/03#a3085</link>
			<description>After running PHP5 beta 2 for 2 days on Apache 1.3 (multi-threaded SAPI on Windows), I was surprised to find that the process was taking 500 Mb. There must be lots of memory leaks. I&apos;m pretty happy that most PHP code just runs, but obviously it&apos;s not production ready.
&lt;p&gt;
Now the hard work starts, how to integrate new PHP5 functionality without impacting old PHP4 code. After thinking a while, I realize there are only a few things I can do to write portable code:
&lt;ul&gt;
&lt;li&gt;In PHP5, we use __clone() to duplicate objects. To make this portable, simply check the PHP_VERSION:
&lt;pre&gt;
  $obj2 = (PHP_VERSION &gt;= 5) ? $this-&gt;__clone() : $this;
&lt;/pre&gt;
&lt;li&gt;Error-handling can be encapsulated in a separate function, and conditionally included based on PHP version. Eg.
&lt;pre&gt;
if (PHP_VERSION &gt;= 5) include(&quot;exceptions.inc.php&quot;);
else include(&quot;error.inc.php&quot;);
&lt;/pre&gt;
&lt;p&gt;&lt;/ul&gt;&lt;p&gt;Unfortunately, most other features require explicit use of keywords that are illegal in PHP4, eg. private, protected, implements, etc. These require maintaining a separate codebase for both versions of PHP, or some special pre-processing to be done on the code depending on the versions. 
Does anyone have a better suggestion?
&lt;p&gt;
PS: I will be releasing a new version of ADOdb soon, one that should be compatible with PHP5.
&lt;p&gt;
&lt;img src=&quot;http://static.userland.com/shortcuts/images/zeldman/damned2.gif&quot;&gt;</description>
			<category>997-2003</category>
			<guid>http://php.weblogs.com/2003/11/03#a3085</guid>
			</item>
		<item>
			<title>PHP 5 beta 2 is out</title>
			<link>http://php.net/</link>
			<description>Just downloaded the Windows install and tested it. 
&lt;p&gt;
To run on Apache, I copied php4apache.dll to the php5 root directory, and modified Apache&apos;s httpd.conf:
&lt;pre&gt;
LoadModule php5_module c:/php5/php5b2/php4apache.dll
AddModule mod_php5.c
AddType application/x-httpd-php .php
&lt;/pre&gt;
&lt;p&gt;
For some reason, php_mysql.dll is not working. The error message is &quot;The procedure entry point mysql_create_db could not be located in the dynamic link library LIBMYSQL.dll&quot;. I made sure that the LIBMYSQL.dll was the one that came with the PHP release. I&apos;m using MySQL 4.0.12. Perhaps someone can comment on this.
&lt;p&gt;
However Oracle&apos;s oci8 extension is working fine. As most of our software runs on Oracle, it was easy for us to continue testing PHP5. 99% of all code ran fine. The only gotcha i found was that if your function returns a reference, you can no longer do this:
&lt;p&gt;
&lt;pre&gt;  return $this-&gt;function();&lt;/pre&gt;
&lt;p&gt;
but have to change your code to this:
&lt;p&gt;
&lt;pre&gt;  $ret =&amp; $this-&gt;function(); # &amp; is not needed if you don&apos;t support PHP4
return $ret;
&lt;/pre&gt;
&lt;p&gt;
A very impressive beta release except for the above glitches.
&lt;p&gt;
&lt;img src=&quot;http://static.userland.com/shortcuts/images/zeldman/nubet.gif&quot;&gt;</description>
			<category>997-2003</category>
			<guid>http://php.weblogs.com/2003/10/31#a3081</guid>
			</item>
		<item>
			<title>A different take on PHP-Con</title>
			<link>http://blogs.gotdotnet.com/bgold/PermaLink.aspx/8176f336-8b28-40f1-82ee-ff00e0c5c1d0</link>
			<description>&lt;i&gt;Before I came down I was worried about how I would be accepted by this crowd as a Microsoft representative.  Would it be hostile?  Would it be open?  &lt;/i&gt;
&lt;p&gt;
&lt;img src=&quot;http://static.userland.com/shortcuts/images/zeldman/jackd.gif&quot;&gt;</description>
			<category>997-2003</category>
			<guid>http://php.weblogs.com/2003/10/30#a3078</guid>
			</item>
		</channel>
	</rss>