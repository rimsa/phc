<chapter id="limitations">
<title id="limitations.title">Limitations</title>

<section>
<title></title>

<para> This document describes the known limitations of the current
&phc implementation.  These limitations are
things that we are aware of but that are not high on our priority list
of things to deal with at the moment. However, if any of them are
bothering you, let us <ulink url="http://www.phpcompiler.org/contact.html">know</ulink> and we
might look into it. </para>

</section>
<section>

<title>Nested Function Definitions</title>

<para> As described in <xref linkend="representingphp"
endterm="representingphp.title">, we cannot deal with nested function
definitions. &phc will break on the following PHP code:

<programlisting>
&lt;?<reserved>php</reserved>
   <reserved>if</reserved>($x)
   {
      <reserved>function</reserved> f()
      {
         <reserved>echo</reserved> "First f";
      }
   }
   <reserved>else</reserved>
   {
      <reserved>function</reserved> f()
      {
         <reserved>echo</reserved> "Second f";
      }
   }

   f();
?&gt;
</programlisting>

<para> Currently &phc will generate the
following AST for this: </para>

<programlisting>
&lt;?<reserved>php</reserved>
   <reserved>function</reserved> f()
   {
      <reserved>echo</reserved> "First f";
   }

   <reserved>function</reserved> f()
   {
      <reserved>echo</reserved> "Second f";
   }

   <reserved>if</reserved>($x)
   {
   }
   <reserved>else</reserved>
   {
   }

   f();
?&gt;
</programlisting>

</section>
<section>

<title> Comments </title>

<para> <xref linkend="representingphp" endterm="representingphp.title"> 
explains how we deal with comments. Most comments in a PHP script
should get attached to the right token in the tree, and no comments
should ever be lost. If that is not true, please send us a sample program that demonstrates
where it breaks. There are a few problems that we are aware of, and
there are probably others too. </para>

<para> Dealing with comments in a completely satisfactory way is a
difficult task! The first problem with our method of dealing with
comments is how we deal with whitespace in multi-line comments.
Consider the following example. </para>

<programlisting>
&lt;?<reserved>php</reserved>
   <emphasis>/*
    * Some comment with
    * multiple lines
    */</emphasis>
   foo();
?&gt;
</programlisting>

<para> The problem is that the whitespace at the start of each line is
included in the comment. This means that when the unparser outputs the
comment, it outputs something like </para>

<programlisting>
&lt;?<reserved>php</reserved>
   <emphasis>/*
    * Some comment with
       * multiple lines
       */</emphasis>
   foo();
?&gt;
</programlisting>

<para>It is unclear how to solve this problem nicely. Suggestions are
welcome :-) </para>

<para> Second, it is not currently possible to associate a comment with
the <code>else</code>-clause of an <code>if</code>-statement. Thus, in
</para>

<programlisting>
&lt;?<reserved>php</reserved>
   <emphasis>// Comment 1</emphasis>
   <reserved>if</reserved>($c)
   {
      foo();
   }
   <emphasis>// Comment 2</emphasis>
   <reserved>else</reserved>
   {
      bar();
   }
?&gt;
</programlisting>

<para> Comment 2 will be associated with the call to <code>bar</code>
(but Comment 1 will be associated with the <code>if</code>-statement
itself). A similar problem occurs with comments for
<code>elseif</code> statements. </para>

<para> Finally, if a scope ends on a comment, that comment will be associated with the wrong node. For example, in </para>

<programlisting>
&lt;?<reserved>php</reserved>
   <reserved>if</reserved>($c)
   {
      <reserved>echo</reserved> "Hi";
   }
   <reserved>else</reserved>
   {
      <emphasis>// Do nothing</emphasis>
   }

   <reserved>echo</reserved> "World";
?&gt;
</programlisting>

<para>the comment will be associated with the <code>echo "World"</code>
statement. A similar problem occurs when a script ends on a comment;
that comment will not be lost, but will be associated with the last
node in the script. </para>

</section>
<section>

<title> Numbers </title>

<para> PHP accepts invalid octal numbers such as <code>01090</code>; the
&ldquo;incorrect tail&rdquo; is silently ignored (so, this number
should evaluate to 8 decimal). The &phc
lexical analyser will generate an &ldquo;invalid token&rdquo; instead
which will result in a syntax error. </para>

</section>
</chapter>
