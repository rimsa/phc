#line 2 "src/generated/lex.yy.cc"

#line 4 "src/generated/lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int PHP_lex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE PHP_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via PHP_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void PHP_restart (FILE *input_file ,yyscan_t yyscanner );
void PHP__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE PHP__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void PHP__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void PHP__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void PHP_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void PHP_pop_buffer_state (yyscan_t yyscanner );

static void PHP_ensure_buffer_stack (yyscan_t yyscanner );
static void PHP__load_buffer_state (yyscan_t yyscanner );
static void PHP__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER PHP__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE PHP__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE PHP__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE PHP__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *PHP_alloc (yy_size_t ,yyscan_t yyscanner );
void *PHP_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void PHP_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer PHP__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        PHP_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            PHP__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        PHP_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            PHP__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define PHP_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 98
#define YY_END_OF_BUFFER 99
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[427] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   87,    1,   87,    1,    1,
        1,   92,    1,   92,    1,    1,    1,    1,    1,   52,
        1,   52,    1,    1,    1,    1,    1,    1,   99,   97,
       98,    1,   97,   98,    1,   97,   98,   97,   98,   56,
       98,   55,   56,   98,    1,   55,   56,   98,    1,   55,
       56,   98,   36,   56,   98,   45,   56,   98,   49,   56,
       98,   36,   56,   98,   36,   56,   98,   36,   56,   98,
       43,   56,   98,   36,   56,   98,   36,   56,   98,   36,
       56,   98,   36,   56,   98,   36,   56,   98,   36,   56,

       98,   36,   56,   98,   40,   56,   98,   40,   56,   98,
       36,   56,   98,   37,   56,   98,   36,   56,   98,   36,
       56,   98,   36,   56,   98,   36,   56,   98,   39,   56,
       98,   36,   56,   98,   44,   56,   98,   36,   56,   98,
       55,   56,   98,    1,   47,   55,   56,   98,   59,   98,
        1,   59,   98,    1,   59,   98,   57,   59,   98,   58,
       59,   98,   61,   98,    1,   61,   98,    1,   61,   98,
       60,   61,   98,   63,   98,    1,   63,   98,    1,   63,
       98,   62,   63,   98,   84,   98,    1,   84,   98,    1,
       84,   98,   81,   84,   98,   84,   98,   83,   84,   98,

       84,   98,   86,   98,    1,   98,    1,   86,   98,   85,
       86,   98,   88,   98,    1,   87,   88,   98,    1,   87,
       88,   98,   91,   98,    1,   91,   98,    1,   91,   98,
       91,   98,   89,   91,   98,   91,   98,   90,   91,   98,
        1,   90,   91,   98,    1,   90,   91,   98,   90,   91,
       98,   89,   90,   91,   98,   90,   91,   98,   93,   98,
        1,   92,   98,    1,   92,   93,   98,   92,   93,   98,
       78,   98,    1,   78,   98,    1,   78,   98,   75,   78,
       98,   77,   78,   98,   74,   78,   98,   71,   78,   98,
       73,   78,   98,   72,   78,   98,   78,   98,   51,   98,

        1,   51,   98,    1,   51,   98,   51,   98,   54,   98,
        1,   52,   98,    1,   52,   54,   98,   54,   98,   54,
       98,   79,   98,    1,   79,   98,    1,   79,   98,   80,
       98,    1,   80,   98,    1,   80,   98,   94,   98,    1,
       94,   98,    1,   94,   98,    1,   96,   11,   38,   27,
       34,   28,   24,   16,   22,   17,   23,   19,   41,   26,
       48,   49,   25,   41,   40,   40,   33,   20,   14,   12,
        9,   18,   15,   21,   42,   39,   30,   29,   35,   47,
       64,   82,   70,   85,    1,   87,    1,   92,   77,   76,
       50,    1,   52,   53,   95,   13,   38,   41,   41,   40,

       46,   31,   10,   32,   42,   42,   64,   77,   76,   53,
       53,   46,   65,   96,    2,   69,   66,   67,    7,    3,
       69,   68,    5,    8,    6,    4
    } ;

static yyconst flex_int16_t yy_accept[344] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   17,   19,   20,   21,   23,
       25,   26,   27,   28,   29,   31,   33,   34,   35,   36,
       37,   38,   39,   40,   42,   45,   48,   50,   52,   55,
       59,   63,   66,   69,   72,   75,   78,   81,   84,   87,
       90,   93,   96,   99,  102,  105,  108,  111,  114,  117,
      120,  123,  126,  129,  132,  135,  138,  141,  144,  149,
      151,  154,  157,  160,  163,  165,  168,  171,  174,  176,
      179,  182,  185,  187,  190,  193,  196,  198,  201,  203,
      205,  207,  210,  213,  215,  219,  223,  225,  228,  231,

      233,  236,  238,  241,  245,  249,  252,  256,  259,  261,
      264,  268,  271,  273,  276,  279,  282,  285,  288,  291,
      294,  297,  299,  301,  304,  307,  309,  311,  314,  318,
      320,  322,  324,  327,  330,  332,  335,  338,  340,  343,
      346,  347,  348,  348,  349,  350,  351,  352,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  354,
      355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
      365,  366,  366,  366,  366,  367,  368,  368,  369,  370,
      371,  372,  373,  374,  375,  376,  377,  378,  379,  380,
      380,  381,  382,  382,  383,  384,  385,  387,  389,  390,

      391,  392,  394,  394,  395,  396,  396,  396,  397,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  399,
      399,  400,  401,  401,  402,  403,  404,  405,  406,  407,
      407,  408,  408,  408,  409,  410,  410,  411,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  413,  413,  413,  413,  413,  413,  413,  414,  414,
      415,  415,  415,  415,  415,  415,  415,  416,  416,  416,
      416,  416,  416,  416,  417,  417,  417,  417,  418,  418,
      418,  419,  419,  419,  419,  419,  420,  420,  420,  420,
      420,  420,  421,  421,  421,  421,  422,  422,  423,  423,

      423,  423,  423,  424,  424,  424,  424,  424,  424,  425,
      425,  425,  425,  425,  425,  425,  426,  426,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   17,   30,   30,   30,   30,   31,   30,
       32,   33,   32,   32,   32,   32,   32,   32,   32,   34,
       32,   32,   32,   32,   32,   32,   32,   35,   32,   32,
       36,   37,   38,   39,   32,   40,   41,   42,   43,   44,

       45,   46,   47,   33,   48,   49,   32,   50,   32,   51,
       52,   53,   32,   54,   55,   56,   57,   32,   32,   58,
       59,   32,   60,   61,   62,   63,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    1,    1,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    5,
        5,    6,    6,    6,    6,    3,    1,    7,    1,    1,
        5,    5,    5,    5,    5,    5,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    8,
        1,    9,    1
    } ;

static yyconst flex_int16_t yy_base[376] =
    {   0,
        0,    2,   28,    5,   89,   91,    8,   10,   93,   95,
      101,  108,  168,    0,   12,   14,  229,  231,  115,  117,
      289,  345,  110,  119,  103,  127,   20,  133,  140,  143,
      145,  147,  851,  852,  852,  847,  110,  852,  852,  852,
      846,  821,  852,  852,    0,  820,   89,  852,  402,  852,
      819,  125,  136,  220,  140,  227,  232,  821,  852,  247,
      130,  209,  816,    0,  816,  852,  217,  254,  852,  852,
      852,  839,  852,  852,  852,  852,  838,  852,  852,  852,
      837,  852,  852,  852,  836,  852,  778,  830,  827,  852,
      852,  832,    0,  852,  852,  831,  852,  852,  830,  772,

      852,  822,  852,  852,  827,  769,  852,  819,  852,  852,
      824,  852,  852,  852,  823,  852,  239,  852,  852,  852,
      852,    0,  852,  852,  822,  804,  852,  852,  820,  802,
      775,  852,  852,  799,  852,  852,  792,  852,  852,  771,
      852,  218,  587,  602,    0,  852,  852,  852,    0,  572,
      573,  572,  573,  570,  578,  574,  562,  566,  852,  852,
      852,  852,  852,  852,  259,  852,  852,  852,  852,  274,
      293,  299,  285,    0,  306,  852,  561,  238,  852,  852,
      588,  852,  852,  587,  266,    0,  852,  852,  852,  281,
      852,   91,    0,  852,  852,    0,  852,  852,  266,    0,

      852,  852,  558,  296,  852,  578,  556,  852,    0,  555,
      555,  549,  549,  532,  525,  532,  518,  502,  310,  313,
      335,    0,  513,  550,  852,  852,  852,  852,  550,  524,
      258,  341,  489,  852,  852,  501,  852,  540,  289,  494,
      495,  467,  474,  474,  366,  459,  453,  454,  438,  428,
      852,    0,    0,  339,  362,  443,  417,  852,  424,  852,
      424,  399,  384,  405,  397,  388,  852,  405,  408,  410,
      396,  386,  393,    0,  393,  357,    0,  852,  387,  392,
      852,  379,  370,  414,  418,  852,  353,  336,  331,  319,
      431,  852,  326,  435,  319,    0,  321,  852,  315,  299,

      458,  462,  852,  288,  263,  466,  470,  483,  852,  257,
      253,  487,  491,  496,  504,  852,  509,  852,  517,  522,
      261,  526,  530,  228,  192,  109,  121,  112,   79,  536,
      544,  557,  563,  574,  578,   69,  312,  582,  588,  594,
      600,  852,  631,  640,  649,  658,  667,  676,  685,  694,
      703,  712,  721,  730,  739,  748,  757,  762,  765,  767,
      772,  775,  777,  780,  783,  785,  788,  792,  795,  800,
      802,  805,  809,  812,  816
    } ;

static yyconst flex_int16_t yy_def[376] =
    {   0,
      343,  343,  342,    3,  344,  344,  345,  345,  346,  346,
      347,  347,  342,   13,  348,  348,  349,  350,  351,  351,
      352,  352,  353,  353,  354,  354,  355,  355,  356,  356,
      357,  357,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  358,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  359,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  360,  342,  342,  342,
      342,  342,  361,  342,  342,  342,  342,  342,  342,  360,

      342,  342,  342,  342,  342,  360,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  362,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  363,  342,  342,  342,   49,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  364,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  359,  342,  342,  342,  342,
      342,  365,  366,  342,  342,  361,  342,  342,  342,  367,

      342,  342,  342,  342,  342,  342,  342,  342,  363,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  364,  342,  342,  342,  342,  342,  342,  342,  342,
      365,  368,  369,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  370,  371,  342,  342,  372,  369,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  373,  374,  342,  375,  342,  342,  372,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  373,  374,  342,  375,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,    0,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342
    } ;

static yyconst flex_int16_t yy_nxt[916] =
    {   0,
      342,  342,   35,   36,   35,   36,   68,   69,  342,   68,
       76,   77,   76,   77,   95,   96,   95,   96,  342,   78,
      342,   78,  133,  134,  342,   37,  342,   37,   38,   39,
       40,   41,   39,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   50,   53,   54,   55,   56,   57,
       57,   58,   59,   60,   61,   62,   63,   64,   64,   64,
       64,   64,   64,   50,   38,   50,   65,   66,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   50,   67,   50,
       50,   71,   72,   71,   72,   80,   81,   80,   81,  147,

       73,  337,   73,   84,   85,  128,  129,   86,  230,   87,
       84,   85,  124,  125,   86,  148,   87,  110,  111,  110,
      111,  124,  125,  330,  126,   74,  232,   74,  130,  128,
      129,  131,   82,  126,   82,  133,  134,   88,  142,  112,
      160,  112,  136,  137,   88,  136,  137,  139,  140,  139,
      140,  161,  130,  162,  167,  131,  181,  182,  329,  168,
       89,  328,  163,  164,  143,  327,  169,   89,   90,   90,
       91,   92,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   93,   93,   93,

       93,   93,   93,   90,   90,   90,   90,   90,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   90,   90,   90,
       90,   98,   99,  104,  105,  183,  184,  100,  326,  106,
      165,  165,  165,  188,  205,  170,  166,  171,  171,  172,
      170,  206,  175,  175,  175,  190,  191,  173,  190,  199,
      199,  174,  173,  224,  225,  101,  177,  107,  228,  229,
      206,  173,  178,  179,  180,  230,  173,  189,  325,  165,
      165,  165,  190,  191,  174,  190,  234,  234,  102,  173,
      108,  114,  115,  232,  219,  219,  219,  116,  237,  238,

      220,  324,  220,  173,  173,  221,  221,  221,  320,  117,
      117,  170,  319,  171,  171,  172,  314,  170,  173,  172,
      172,  172,  260,  173,  170,  118,  175,  175,  175,  173,
      219,  219,  219,  221,  221,  221,  173,  173,  313,  119,
      173,  260,  120,  173,  121,  338,  122,  114,  115,  253,
      173,  311,  278,  116,  173,  221,  221,  221,  298,  276,
      276,  254,  255,  255,  338,  117,  117,  266,  266,  266,
      266,  310,  307,  277,  306,  305,  278,  276,  276,  267,
      270,  118,  279,  279,  279,  285,  285,  285,  285,  266,
      266,  266,  266,  304,  278,  119,  277,  286,  120,  278,

      121,  267,  122,  149,  149,  149,  149,  279,  279,  279,
      268,  291,  291,  291,  291,  302,  302,  302,  302,  285,
      285,  285,  285,  292,  278,  301,  300,  303,  287,  281,
      298,  286,  291,  291,  291,  291,  308,  308,  308,  308,
      295,  294,  150,  151,  292,  152,  293,  153,  309,  154,
      290,  289,  270,  155,  288,  156,  157,  284,  158,  312,
      312,  312,  312,  302,  302,  302,  302,  315,  315,  315,
      315,  317,  317,  317,  317,  303,  283,  282,  258,  316,
      281,  273,  272,  318,  308,  308,  308,  308,  312,  312,
      312,  312,  285,  285,  285,  285,  309,  266,  266,  266,

      266,  271,  270,  269,  286,  315,  315,  315,  315,  267,
      317,  317,  317,  317,  265,  264,  263,  316,  322,  322,
      322,  322,  318,  323,  323,  323,  323,  322,  322,  322,
      322,  323,  323,  323,  323,  262,  321,  331,  331,  331,
      331,  261,  237,  259,  185,  331,  331,  331,  331,  204,
      258,  252,  228,  185,  251,  250,  249,  204,  333,  333,
      333,  333,  332,  334,  333,  333,  333,  333,  334,  334,
      332,  248,  247,  246,  334,  335,  335,  335,  335,  335,
      335,  335,  335,  339,  339,  339,  339,  245,  340,  339,
      339,  339,  339,  340,  340,  341,  341,  341,  341,  340,

      244,  341,  341,  341,  341,  243,  242,  336,  241,  240,
      239,  336,  236,  227,  226,  223,  218,  217,  216,  215,
      214,  260,  213,  212,  211,  210,  336,  260,  208,  207,
      336,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   97,   97,   97,   97,   97,
       97,   97,   97,   97,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  145,  145,  186,  186,
      186,  192,  192,  141,  192,  196,  196,  196,  200,  200,
      209,  209,  209,  222,  222,  231,  231,  231,  231,  233,
      233,  235,  235,  256,  141,  256,  256,  256,  257,  257,

      257,  141,  204,  257,  274,  274,  275,  275,  280,  280,
      280,  280,  296,  296,  296,  297,  297,  297,  297,  299,
      299,  203,  202,  201,  141,  141,  198,  195,  193,  141,
      195,  193,  141,  197,  141,  195,  194,  193,  141,  141,
      141,  141,  187,  185,  176,  159,  146,  144,  141,  141,
      342,   33,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342
    } ;

static yyconst flex_int16_t yy_chk[916] =
    {   0,
        0,    0,    1,    1,    2,    2,    4,    4,    0,    4,
        7,    7,    8,    8,   15,   15,   16,   16,    0,    7,
        0,    8,   27,   27,    0,    1,    0,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    5,    5,    6,    6,    9,    9,   10,   10,   47,

        5,  336,    6,   11,   11,   25,   25,   11,  192,   11,
       12,   12,   23,   23,   12,   47,   12,   19,   19,   20,
       20,   24,   24,  329,   23,    5,  192,    6,   25,   26,
       26,   25,    9,   24,   10,   28,   28,   11,   37,   19,
       52,   20,   29,   29,   12,   30,   30,   31,   31,   32,
       32,   52,   26,   53,   55,   26,   61,   61,  328,   55,
       11,  327,   53,   53,   37,  326,   55,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   17,   17,   18,   18,   62,   62,   17,  325,   18,
       54,   54,   54,   67,  142,   56,   54,   56,   56,   56,
       57,  142,   57,   57,   57,   68,   68,   56,   68,  117,
      117,   56,   57,  178,  178,   17,   60,   18,  185,  185,
      142,   56,   60,   60,   60,  231,   57,   67,  324,  165,
      165,  165,  190,  190,   56,  190,  199,  199,   17,  165,
       18,   21,   21,  231,  170,  170,  170,   21,  204,  204,

      173,  321,  173,  165,  170,  173,  173,  173,  311,   21,
       21,  171,  310,  171,  171,  171,  305,  172,  170,  172,
      172,  172,  239,  171,  175,   21,  175,  175,  175,  172,
      219,  219,  219,  220,  220,  220,  175,  171,  304,   21,
      219,  239,   21,  172,   21,  337,   21,   22,   22,  232,
      175,  300,  299,   22,  219,  221,  221,  221,  297,  254,
      254,  232,  232,  232,  337,   22,   22,  245,  245,  245,
      245,  295,  293,  254,  290,  289,  254,  276,  276,  245,
      288,   22,  255,  255,  255,  263,  263,  263,  263,  266,
      266,  266,  266,  287,  276,   22,  254,  263,   22,  255,

       22,  266,   22,   49,   49,   49,   49,  279,  279,  279,
      245,  270,  270,  270,  270,  284,  284,  284,  284,  285,
      285,  285,  285,  270,  279,  283,  282,  284,  263,  280,
      275,  285,  291,  291,  291,  291,  294,  294,  294,  294,
      273,  272,   49,   49,  291,   49,  271,   49,  294,   49,
      269,  268,  265,   49,  264,   49,   49,  262,   49,  301,
      301,  301,  301,  302,  302,  302,  302,  306,  306,  306,
      306,  307,  307,  307,  307,  302,  261,  259,  257,  306,
      256,  250,  249,  307,  308,  308,  308,  308,  312,  312,
      312,  312,  313,  313,  313,  313,  308,  314,  314,  314,

      314,  248,  247,  246,  313,  315,  315,  315,  315,  314,
      317,  317,  317,  317,  244,  243,  242,  315,  319,  319,
      319,  319,  317,  320,  320,  320,  320,  322,  322,  322,
      322,  323,  323,  323,  323,  241,  312,  330,  330,  330,
      330,  240,  238,  236,  319,  331,  331,  331,  331,  320,
      233,  230,  229,  322,  224,  223,  218,  323,  332,  332,
      332,  332,  330,  332,  333,  333,  333,  333,  332,  333,
      331,  217,  216,  215,  333,  334,  334,  334,  334,  335,
      335,  335,  335,  338,  338,  338,  338,  214,  338,  339,
      339,  339,  339,  338,  339,  340,  340,  340,  340,  339,

      213,  341,  341,  341,  341,  212,  211,  334,  210,  207,
      206,  335,  203,  184,  181,  177,  158,  157,  156,  155,
      154,  340,  153,  152,  151,  150,  334,  341,  144,  143,
      335,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  350,  350,  350,  350,  350,  350,

      350,  350,  350,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  358,  358,  359,  359,
      359,  360,  360,  140,  360,  361,  361,  361,  362,  362,
      363,  363,  363,  364,  364,  365,  365,  365,  365,  366,
      366,  367,  367,  368,  137,  368,  368,  368,  369,  369,

      369,  134,  131,  369,  370,  370,  371,  371,  372,  372,
      372,  372,  373,  373,  373,  374,  374,  374,  374,  375,
      375,  130,  129,  126,  125,  115,  111,  108,  106,  105,
      102,  100,   99,   96,   92,   89,   88,   87,   85,   81,
       77,   72,   65,   63,   58,   51,   46,   42,   41,   36,
       33,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342
    } ;

#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/generated_src/php_scanner.lex"
/*
 * phc -- the open source PHP compiler
 * See doc/license/README.license for licensing information
 *
 * Lexical analyser
 *
 * NOTE: 
 * In PHP, the constant "01090" is taken to be an octal number; everything
 * from the 9 onwards is silently ignored (so, the number evaluates to 8
 * decimal). phc will give an error message instead.
*/
#line 14 "src/generated_src/php_scanner.lex"
	#include <assert.h>
	#include <string.h>
	#include "AST.h"
	#include "lib/Integer.h"
	#include "php_parser.tab.hpp"
	#include "cmdline.h"
	#include "parsing/PHP_context.h"
	#include "keywords.h"

	extern struct gengetopt_args_info args_info;
	
	#define YY_SKIP_YYWRAP

	/*
	 * Macros to return a token
	 * If dump_tokens_flag is set, also print the token to stdout
	 */

	#define RETURN(x) {															\
		if(args_info.dump_tokens_flag)										\
			printf("%ld: " #x "\n", yyextra->source_line);				\
		yyextra->after_arrow = (x) == O_SINGLEARROW;						\
		yyextra->starts_line = false;											\
		return x; }
	#define RETURN_OP(t, s) {													\
		if(args_info.dump_tokens_flag) 										\
			printf("%ld: SIMPLE_OP %s\n", yyextra->source_line, s);	\
		yylval->token_op = new Token_op(new String(s)); 				\
		copy_state(yylval->token_op, yyextra);								\
		yyextra->after_arrow = false;											\
		yyextra->starts_line = false;											\
		return t; } 

	#define RETURN_ALL(state)					\
		yyextra->mt_final_state = state;		\
		yyextra->mt_index = 1;					\
		BEGIN(RET_MULTI);							\
		*yylval = yyextra->mt_lval[0];		\
		RETURN(yyextra->mt_type[0]);

	#define YY_EXTRA_TYPE PHP_context*
	
	// Defined in the parser
	AST_node* copy_state(AST_node* node, PHP_context* context);
/* Define lexical states */

		


		










/* Define a few tokens referenced in the grammar, below */
#line 889 "src/generated/lex.yy.cc"

#define INITIAL 0
#define PHP 1
#define SQ_STR 2
#define SQ_ESC 3
#define BT_STR 4
#define DQ_STR 5
#define HD_STR 6
#define HD_NL 7
#define HD_MAIN 8
#define HD_END 9
#define ESCAPE 10
#define ML_COMM 11
#define SL_COMM 12
#define COMPLEX1 13
#define COMPLEX2 14
#define RET_MULTI 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int PHP_lex_destroy (yyscan_t yyscanner );

int PHP_get_debug (yyscan_t yyscanner );

void PHP_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE PHP_get_extra (yyscan_t yyscanner );

void PHP_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *PHP_get_in (yyscan_t yyscanner );

void PHP_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *PHP_get_out (yyscan_t yyscanner );

void PHP_set_out  (FILE * out_str ,yyscan_t yyscanner );

int PHP_get_leng (yyscan_t yyscanner );

char *PHP_get_text (yyscan_t yyscanner );

int PHP_get_lineno (yyscan_t yyscanner );

void PHP_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * PHP_get_lval (yyscan_t yyscanner );

void PHP_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int PHP_wrap (yyscan_t yyscanner );
#else
extern int PHP_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int PHP_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int PHP_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 132 "src/generated_src/php_scanner.lex"


	/* Update source_line */

#line 1148 "src/generated/lex.yy.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)PHP_alloc(YY_STATE_BUF_SIZE  ,yyscanner);

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			PHP_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				PHP__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		PHP__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 343 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 852 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
					{
					yyg->yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 136 "src/generated_src/php_scanner.lex"
{
								if(YY_START != SL_COMM && YY_START != ML_COMM)
									yyextra->attach_to_previous = 0;

								yyextra->source_line++;
								yyextra->starts_line = true;
								REJECT;
							}
	YY_BREAK
/* Casts */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 147 "src/generated_src/php_scanner.lex"
{ RETURN(CAST_INT);  }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 148 "src/generated_src/php_scanner.lex"
{ RETURN(CAST_REAL);  }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 149 "src/generated_src/php_scanner.lex"
{ RETURN(CAST_STRING);  }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 150 "src/generated_src/php_scanner.lex"
{ RETURN(CAST_ARRAY);  }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 151 "src/generated_src/php_scanner.lex"
{ RETURN(CAST_OBJECT);  }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 152 "src/generated_src/php_scanner.lex"
{ RETURN(CAST_BOOL);  }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 153 "src/generated_src/php_scanner.lex"
{ RETURN(CAST_UNSET);  }
	YY_BREAK
/* Operators */
case 9:
YY_RULE_SETUP
#line 157 "src/generated_src/php_scanner.lex"
{ RETURN_OP(O_EQEQ, "=="); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 158 "src/generated_src/php_scanner.lex"
{ RETURN_OP(O_EQEQEQ, "==="); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 159 "src/generated_src/php_scanner.lex"
{ RETURN_OP(O_NOTEQ, "!="); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 160 "src/generated_src/php_scanner.lex"
{ RETURN_OP(O_NOTEQ, "<>"); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 161 "src/generated_src/php_scanner.lex"
{ RETURN_OP(O_NOTEQEQ, "!=="); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 162 "src/generated_src/php_scanner.lex"
{ RETURN_OP(O_LE, "<="); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 163 "src/generated_src/php_scanner.lex"
{ RETURN_OP(O_GE, ">="); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 165 "src/generated_src/php_scanner.lex"
{ RETURN(O_INC); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 166 "src/generated_src/php_scanner.lex"
{ RETURN(O_DEC); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 167 "src/generated_src/php_scanner.lex"
{ RETURN(O_DOUBLEARROW); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 168 "src/generated_src/php_scanner.lex"
{ RETURN(O_SINGLEARROW); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 170 "src/generated_src/php_scanner.lex"
{ RETURN_OP(O_SL, "<<"); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 171 "src/generated_src/php_scanner.lex"
{ RETURN_OP(O_SR, ">>"); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 173 "src/generated_src/php_scanner.lex"
{ RETURN(O_PLUSEQ); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 174 "src/generated_src/php_scanner.lex"
{ RETURN(O_MINUSEQ); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 175 "src/generated_src/php_scanner.lex"
{ RETURN(O_MULEQ); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 176 "src/generated_src/php_scanner.lex"
{ RETURN(O_DIVEQ); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 177 "src/generated_src/php_scanner.lex"
{ RETURN(O_CONCATEQ); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 178 "src/generated_src/php_scanner.lex"
{ RETURN(O_MODEQ); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 179 "src/generated_src/php_scanner.lex"
{ RETURN(O_ANDEQ); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 180 "src/generated_src/php_scanner.lex"
{ RETURN(O_OREQ); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 181 "src/generated_src/php_scanner.lex"
{ RETURN(O_XOREQ); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 182 "src/generated_src/php_scanner.lex"
{ RETURN(O_SLEQ); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 183 "src/generated_src/php_scanner.lex"
{ RETURN(O_SREQ); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 184 "src/generated_src/php_scanner.lex"
{ RETURN(O_COLONCOLON); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 186 "src/generated_src/php_scanner.lex"
{ RETURN_OP(O_LOGICAND, "&&"); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 187 "src/generated_src/php_scanner.lex"
{ RETURN_OP(O_LOGICOR, "||"); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 189 "src/generated_src/php_scanner.lex"
{ RETURN_OP(*yytext, yytext); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 190 "src/generated_src/php_scanner.lex"
{ 
								yyextra->attach_to_previous = true; 
								RETURN_OP(*yytext, yytext); 
							} 
	YY_BREAK
/* Tokens */
case 38:
YY_RULE_SETUP
#line 197 "src/generated_src/php_scanner.lex"
{
								// variable names do not contain $
								yylval->string = new String(yytext+1); 
								RETURN(VARIABLE);
							}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 202 "src/generated_src/php_scanner.lex"

							{	// Can't declare local variables without scoping them
								
								// We generate a semantic value which equals the 
								// keyword so that we can reproduce it exactly the
								// same way in the unparsers, if we so desire 
								// (keywords are case insensitive)
								yylval->string = new String(yytext);
							
								// Check if the ident is in fact a keyword
								const struct keyword* keyword;
								keyword = in_word_set(yytext, yyleng);
								if(keyword != 0 && !yyextra->after_arrow)
								{
									switch(keyword->token)
									{
										case K_AND:
										case K_OR:
										case K_XOR:
											yylval->token_op = new Token_op(
												new String(yytext));
											copy_state(yylval->token_op, yyextra);
											break;
										case C_FALSE:
											yylval->token_bool = new Token_bool(false, 
												new String(yytext));
											copy_state(yylval->token_bool, yyextra);
											break;
										case C_TRUE:
											yylval->token_bool = new Token_bool(true, 
												new String(yytext));
											copy_state(yylval->token_bool, yyextra);
											break;
										case C_NULL:
											yylval->token_null = new Token_null( 
												new String(yytext));
											copy_state(yylval->token_null, yyextra);
											break;
										case K___LINE__:
											yylval->token_int = new Token_int(
												yyextra->source_line,
												new String(yytext));
											copy_state(yylval->token_int, yyextra);
											break;
										case K___FILE__:
											yylval->token_string = new Token_string(
												yyextra->filename,
												new String("__FILE__"));
											copy_state(yylval->token_string, yyextra);
											break;
										case K___CLASS__:
											yylval->token_string = new Token_string(
												yyextra->current_class,
												new String("__CLASS__"));
											copy_state(yylval->token_string, yyextra);
											break;
										case K___METHOD__:
											yylval->token_string = new Token_string(
												yyextra->current_method,
												new String("__METHOD__"));
											copy_state(yylval->token_string, yyextra);
											break;
										case K___FUNCTION__:
											yylval->token_string = new Token_string(
												yyextra->current_method,
												new String("__FUNCTION__"));
											copy_state(yylval->token_string, yyextra);
											break;
										case K_CLASS:
										case K_FUNCTION:
											yyextra->attach_to_previous = 1;
											break;
									}
									
									RETURN(keyword->token);
								}
								else
								{
									RETURN(IDENT);
								}
							}

	YY_BREAK
case 40:
YY_RULE_SETUP
#line 284 "src/generated_src/php_scanner.lex"
{ 
								Token_int* i = new Token_int(
									strtol(yytext, 0, 0),
									new String(yytext));
								copy_state(i, yyextra);
								yylval->token_int = i;
								RETURN(INT); 
							}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 292 "src/generated_src/php_scanner.lex"
{ 
								Token_real* r = new Token_real(
									atof(yytext),
									new String(yytext));
								copy_state(r, yyextra);
								yylval->token_real = r;
								RETURN(REAL); 
							}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 300 "src/generated_src/php_scanner.lex"
{ yyextra->buffer = ""; BEGIN(INITIAL); RETURN(';'); }
	YY_BREAK
/* Strings */
case 43:
YY_RULE_SETUP
#line 304 "src/generated_src/php_scanner.lex"
{ yyextra->buffer = ""; BEGIN(SQ_STR); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 305 "src/generated_src/php_scanner.lex"
{ yyextra->buffer = ""; BEGIN(BT_STR); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 306 "src/generated_src/php_scanner.lex"
{ yyextra->buffer = ""; BEGIN(DQ_STR); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 307 "src/generated_src/php_scanner.lex"
{ yyextra->buffer = ""; BEGIN(HD_STR); }
	YY_BREAK
/* Comments */
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 311 "src/generated_src/php_scanner.lex"
{
								// Following a suggestion by Tim Van Holder on bison-help,
								// we treat blank lines as comments
								yyextra->last_comments.push_back(new String(""));
							}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 316 "src/generated_src/php_scanner.lex"
{
								yyextra->buffer = yytext;	
								BEGIN(ML_COMM); 
							}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 320 "src/generated_src/php_scanner.lex"
{ 
								yyextra->buffer = yytext;	
								BEGIN(SL_COMM); 
							}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 325 "src/generated_src/php_scanner.lex"
{ 
								yyextra->buffer.append(yytext);
								
								if(yyextra->attach_to_previous)
									yyextra->attach_comment(new String(yyextra->buffer));
								else
									yyextra->last_comments.push_back(new String(yyextra->buffer));
								BEGIN(PHP); 
							
								yyextra->buffer = "";
							}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 336 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back(*yytext); }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 338 "src/generated_src/php_scanner.lex"
{ 
								if(yyextra->attach_to_previous)
									yyextra->attach_comment(new String(yyextra->buffer));
								else
									yyextra->last_comments.push_back(new String(yyextra->buffer));
								yyextra->attach_to_previous = 0;
								BEGIN(PHP);

								yyextra->buffer = "";
							}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 348 "src/generated_src/php_scanner.lex"
{ yyextra->buffer = ""; BEGIN(INITIAL); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 349 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back(*yytext); }	
	YY_BREAK
/* Any other character */
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 353 "src/generated_src/php_scanner.lex"
/* Ignore */
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 354 "src/generated_src/php_scanner.lex"
{ RETURN(INVALID_TOKEN); }
	YY_BREAK
/* Deal with singly quoted strings */
case 57:
YY_RULE_SETUP
#line 358 "src/generated_src/php_scanner.lex"
{
							Token_string* str = new Token_string(
								new String(yyextra->buffer),
								new String(yyextra->buffer));
							copy_state(str, yyextra);
							str->attrs->set("phc.unparser.is_singly_quoted", 
								new Boolean(true)); 
							yylval->token_string = str;

							BEGIN(PHP);
							yyextra->buffer = "";
							RETURN(STRING);
						}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 371 "src/generated_src/php_scanner.lex"
{ BEGIN(SQ_ESC); }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 372 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back(*yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 374 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back(*yytext); BEGIN(SQ_STR); }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 375 "src/generated_src/php_scanner.lex"
{
							yyextra->buffer.push_back('\\');
							yyextra->buffer.push_back(*yytext);
							BEGIN(SQ_STR); 
						}
	YY_BREAK
/* Deal with backticked strings. */
case 62:
YY_RULE_SETUP
#line 383 "src/generated_src/php_scanner.lex"
{
							yyextra->schedule_return(IDENT, "shell_exec");
							yyextra->schedule_return('(');
							yyextra->schedule_return(STRING, yyextra->buffer);
							yyextra->schedule_return(')');
							yyextra->buffer = "";
							RETURN_ALL(PHP);
						}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 391 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back(*yytext); }
	YY_BREAK
/* Deal with in-string syntax (in DQ_STR, and HD_STR) */
case 64:
YY_RULE_SETUP
#line 395 "src/generated_src/php_scanner.lex"
{
							yyextra->schedule_return(STRING, yyextra->buffer);
							yyextra->schedule_return('.', ".");
							yyextra->schedule_return(VARIABLE, &yytext[1]);
							yyextra->schedule_return('.', ".");

							yyextra->buffer = "";
							RETURN_ALL(YY_START);
						}	
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 404 "src/generated_src/php_scanner.lex"
{
							yyextra->schedule_return(STRING, yyextra->buffer);
							yyextra->schedule_return('.', ".");
							yyextra->schedule_return(VARIABLE, &yytext[2], yyleng - 3);
							yyextra->schedule_return('.', ".");
							yyextra->buffer = "";
							RETURN_ALL(YY_START);
						}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 412 "src/generated_src/php_scanner.lex"

						{
							long left, right;
							left = strchr(yytext, '[') - yytext;
							right = strchr(yytext, ']') - yytext;

							yyextra->schedule_return(STRING, yyextra->buffer);
							yyextra->schedule_return('.', ".");
							yyextra->schedule_return(VARIABLE, &yytext[1], left - 1);
							yyextra->schedule_return('[');
							yyextra->schedule_return(INT, &yytext[left+1], right - left - 1);
							yyextra->schedule_return(']');
							yyextra->schedule_return('.', ".");
							
							yyextra->buffer = "";
							RETURN_ALL(YY_START);
						} 

	YY_BREAK
case 67:
YY_RULE_SETUP
#line 430 "src/generated_src/php_scanner.lex"

						{
							long left, right;
							left = strchr(yytext, '[') - yytext;
							right = strchr(yytext, ']') - yytext;
							
							yyextra->schedule_return(STRING, yyextra->buffer);
							yyextra->schedule_return('.', ".");
							yyextra->schedule_return(VARIABLE, &yytext[1], left - 1);
							yyextra->schedule_return('[');
							yyextra->schedule_return(STRING, &yytext[left+1], right - left - 1);
							yyextra->schedule_return(']');
							yyextra->schedule_return('.', ".");
							
							yyextra->buffer = "";
							RETURN_ALL(YY_START);
						} 

	YY_BREAK
case 68:
YY_RULE_SETUP
#line 448 "src/generated_src/php_scanner.lex"

						{
							long left, right;
							left = strchr(yytext, '[') - yytext;
							right = strchr(yytext, ']') - yytext;
							
							yyextra->schedule_return(STRING, yyextra->buffer);
							yyextra->schedule_return('.', ".");
							yyextra->schedule_return(VARIABLE, &yytext[1], left - 1);
							yyextra->schedule_return('[');
							yyextra->schedule_return(VARIABLE, &yytext[left+2], right - left - 2);
							yyextra->schedule_return(']');
							yyextra->schedule_return('.', ".");
							
							yyextra->buffer = "";
							RETURN_ALL(YY_START);
						} 

	YY_BREAK
case 69:
YY_RULE_SETUP
#line 466 "src/generated_src/php_scanner.lex"

						{
							long arrow;
							arrow = strchr(yytext, '-') - yytext;
							
							yyextra->schedule_return(STRING, yyextra->buffer);
							yyextra->schedule_return('.', ".");
							yyextra->schedule_return(VARIABLE, &yytext[1], arrow - 1);
							yyextra->schedule_return(O_SINGLEARROW);
							yyextra->schedule_return(IDENT, &yytext[arrow+2]);
							yyextra->schedule_return('.', ".");

							yyextra->buffer = "";
							RETURN_ALL(YY_START);
						} 

	YY_BREAK
case 70:
YY_RULE_SETUP
#line 483 "src/generated_src/php_scanner.lex"
{
							yy_push_state(COMPLEX2, yyscanner);
							yy_push_state(COMPLEX1, yyscanner);

							Token_string* str = new Token_string(
								new String(yyextra->buffer),
								new String(yyextra->buffer));
							copy_state(str, yyextra);
							yylval->token_string = str;

							yyless(1);
							yyextra->buffer = "";
							RETURN(STRING);
						}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 498 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back('\n'); yy_pop_state(yyscanner); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 499 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back('\t'); yy_pop_state(yyscanner); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 500 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back('\r'); yy_pop_state(yyscanner); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 501 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back('\\'); yy_pop_state(yyscanner); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 502 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back('$');  yy_pop_state(yyscanner); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 503 "src/generated_src/php_scanner.lex"

						{
							char c = (char) strtol(yytext + 1, 0, 16);
							yyextra->buffer.push_back(c);
							yy_pop_state(yyscanner);
						}

	YY_BREAK
case 77:
YY_RULE_SETUP
#line 510 "src/generated_src/php_scanner.lex"

						{
							char c = (char) strtol(yytext, 0, 8);
							yyextra->buffer.push_back(c);
							yy_pop_state(yyscanner);
						}

	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 517 "src/generated_src/php_scanner.lex"
{ 
							yyextra->buffer.push_back('\\');
							yyextra->buffer.push_back(*yytext);
							yy_pop_state(yyscanner);
						}
	YY_BREAK
/* Complex syntax */
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 525 "src/generated_src/php_scanner.lex"
{
							yyless(0);
							BEGIN(PHP);
							RETURN(O_MAGIC_CONCAT);
						}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 530 "src/generated_src/php_scanner.lex"
{
							yyless(0);
							yy_pop_state(yyscanner);
							RETURN_OP('.', ".");
						}
	YY_BREAK
/* Deal with (doubly quoted) strings. */
case 81:
YY_RULE_SETUP
#line 538 "src/generated_src/php_scanner.lex"
{
							Token_string* str = new Token_string(
								new String(yyextra->buffer),
								new String(yyextra->buffer));
							copy_state(str, yyextra);
							yylval->token_string = str;

							BEGIN(PHP);
							yyextra->buffer = "";
							RETURN(STRING);
						}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 550 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back('"'); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 551 "src/generated_src/php_scanner.lex"
{ yy_push_state(ESCAPE, yyscanner); }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 552 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back(*yytext); }
	YY_BREAK
/* Heredoc syntax */
case 85:
YY_RULE_SETUP
#line 556 "src/generated_src/php_scanner.lex"
{
							yyextra->heredoc_id = strdup(yytext);
							yyextra->heredoc_id_len = yyleng;
							yyextra->heredoc_id_ptr = 0;
							
							if(!strcmp(yytext, "INLINE_C"))
								yyextra->last_comments.push_back(new String("// phc:inline-c"));

							BEGIN(HD_NL);
						}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 566 "src/generated_src/php_scanner.lex"
{ 
							yyless(0); 
							BEGIN(PHP); 
							RETURN(INVALID_TOKEN);
						}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 572 "src/generated_src/php_scanner.lex"
{ BEGIN(HD_MAIN); }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 573 "src/generated_src/php_scanner.lex"
{ RETURN(INVALID_TOKEN);	}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 575 "src/generated_src/php_scanner.lex"
{ yy_push_state(ESCAPE, yyscanner); }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 576 "src/generated_src/php_scanner.lex"
{
							yyextra->buffer.push_back(*yytext);

							if(*yytext == yyextra->heredoc_id[0])
								yyextra->heredoc_id_ptr = &yyextra->heredoc_id[1];
						}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 582 "src/generated_src/php_scanner.lex"

							yyextra->buffer.push_back(*yytext);

							if(yyextra->heredoc_id_ptr && (*yyextra->heredoc_id_ptr == *yytext))
								yyextra->heredoc_id_ptr++;
							else
								yyextra->heredoc_id_ptr = 0;

							if(yyextra->heredoc_id_ptr - yyextra->heredoc_id == yyextra->heredoc_id_len)
							{	
								BEGIN(HD_END);
							}

	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 595 "src/generated_src/php_scanner.lex"
 
							{
								// Remove heredoc_id from the buffer 
								long string_len = yyextra->buffer.size() - yyextra->heredoc_id_len;

								// The linebreak of the last line of the HEREDOC
								// string should also be stripped
								if(string_len > 0 && yyextra->buffer[string_len - 1] == '\n')
									string_len--;
								if(string_len > 0 && yyextra->buffer[string_len - 1] == '\r')
									string_len--; // Windows file
						
								Token_string* str = new Token_string(
									new String(yyextra->buffer.substr(0, string_len)),
									new String(yyextra->buffer.substr(0, string_len)));
								copy_state(str, yyextra);
								yylval->token_string = str;
								
								if(yytext[0] == ';')
									yyless(0);
								
								BEGIN(PHP);
								yyextra->buffer = "";
								RETURN(STRING);
							}

	YY_BREAK
case 93:
YY_RULE_SETUP
#line 621 "src/generated_src/php_scanner.lex"

							yyextra->buffer.push_back(*yytext);
							yyextra->heredoc_id_ptr = 0;
							BEGIN(HD_MAIN);

	YY_BREAK
/* Returning multiple tokens */
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 629 "src/generated_src/php_scanner.lex"
{
							yyless(0);

							if(yyextra->mt_index == yyextra->mt_count - 1)
							{
								yyextra->mt_count = 0;
								BEGIN(yyextra->mt_final_state);
							}

							*yylval = yyextra->mt_lval[yyextra->mt_index];
							yyextra->mt_index++;
							RETURN(yyextra->mt_type[yyextra->mt_index - 1]);
						}
	YY_BREAK
/* Deal with HTML fragments */
case 95:
YY_RULE_SETUP
#line 645 "src/generated_src/php_scanner.lex"
{
							// The logic that deals with returning multiple tokens
							// needs at least two tokens to work with.
							if(!yyextra->buffer.empty())
								yyextra->schedule_return(INLINE_HTML, yyextra->buffer);
							else
								yyextra->schedule_return(';');

							yyextra->schedule_return(K_ECHO);
							RETURN_ALL(PHP);
						}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 656 "src/generated_src/php_scanner.lex"

							BEGIN(PHP); 

							if(!yyextra->buffer.empty())
							{
								yylval->string = new String(yyextra->buffer);
								RETURN(INLINE_HTML);
							}

	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PHP):
case YY_STATE_EOF(SQ_STR):
case YY_STATE_EOF(SQ_ESC):
case YY_STATE_EOF(BT_STR):
case YY_STATE_EOF(DQ_STR):
case YY_STATE_EOF(HD_STR):
case YY_STATE_EOF(HD_NL):
case YY_STATE_EOF(HD_MAIN):
case YY_STATE_EOF(HD_END):
case YY_STATE_EOF(ESCAPE):
case YY_STATE_EOF(ML_COMM):
case YY_STATE_EOF(SL_COMM):
case YY_STATE_EOF(COMPLEX1):
case YY_STATE_EOF(COMPLEX2):
case YY_STATE_EOF(RET_MULTI):
#line 665 "src/generated_src/php_scanner.lex"

							if(yyextra->buffer.empty())
							{
								yyterminate();
							} 
							else 
							{
								yylval->string = new String(yyextra->buffer);	
								yyextra->buffer = "";
								RETURN(INLINE_HTML);
							}

	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 677 "src/generated_src/php_scanner.lex"
{ yyextra->buffer.push_back(*yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 679 "src/generated_src/php_scanner.lex"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2183 "src/generated/lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * PHP_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( PHP_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of PHP_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			PHP_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 343 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 343 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 342);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					PHP_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( PHP_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void PHP_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        PHP_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            PHP__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	PHP__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	PHP__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void PHP__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		PHP_pop_buffer_state();
	 *		PHP_push_buffer_state(new_buffer);
     */
	PHP_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	PHP__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (PHP_wrap()) processing, but the only time this flag
	 * is looked at is after PHP_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void PHP__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE PHP__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) PHP_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in PHP__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) PHP_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in PHP__create_buffer()" );

	b->yy_is_our_buffer = 1;

	PHP__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with PHP__create_buffer()
 * @param yyscanner The scanner object.
 */
    void PHP__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		PHP_free((void *) b->yy_ch_buf ,yyscanner );

	PHP_free((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a PHP_restart() or at EOF.
 */
    static void PHP__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	PHP__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then PHP__init_buffer was _probably_
     * called from PHP_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void PHP__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		PHP__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void PHP_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	PHP_ensure_buffer_stack(yyscanner);

	/* This block is copied from PHP__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from PHP__switch_to_buffer. */
	PHP__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void PHP_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	PHP__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		PHP__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void PHP_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)PHP_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)PHP_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE PHP__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) PHP_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in PHP__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	PHP__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to PHP_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       PHP__scan_bytes() instead.
 */
YY_BUFFER_STATE PHP__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return PHP__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to PHP_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE PHP__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) PHP_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in PHP__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = PHP__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in PHP__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) PHP_alloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) PHP_realloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE PHP_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int PHP_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int PHP_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *PHP_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *PHP_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int PHP_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *PHP_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void PHP_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void PHP_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "PHP_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void PHP_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "PHP_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see PHP__switch_to_buffer
 */
void PHP_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void PHP_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int PHP_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void PHP_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * PHP_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void PHP_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* PHP_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int PHP_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) PHP_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from PHP_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * PHP_lex_init()
     */
    return 0;
}

/* PHP_lex_destroy is for both reentrant and non-reentrant scanners. */
int PHP_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		PHP__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		PHP_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	PHP_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        PHP_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    PHP_free ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * PHP_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    PHP_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *PHP_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *PHP_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void PHP_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see PHP_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 679 "src/generated_src/php_scanner.lex"



/**
 * We need to define this here rather than in PHP_lexer.h because we
 * need access to the BEGIN and COMPLEX2 macros defined in lex.yy.cc
 */

void PHP_context::init_scanner(FILE* input)
{
	PHP_lex_init(&scanner);
	PHP_set_extra(this,scanner);
	PHP_set_in(input,scanner);
}

void PHP_context::destroy_scanner()
{
	PHP_lex_destroy(scanner);
}

void PHP_context::return_to_complex_syntax()
{
	yy_pop_state(scanner);
}

// Attach a comment to the last node generated
void PHP_context::attach_comment(String *s)
{
	s->attrs->set("phc.unparser.comment.after", new Boolean(true));
	assert(last_commented_node);
	last_commented_node->get_comments()->push_back(s);
}	
	
void PHP_context::schedule_return(long type, const char* lval, long length)
{
	mt_type[mt_count] = type;

	if(lval)
	{
		Token_int* i;
		Token_string* s;
		int len = length == -1 ? strlen(lval) : length;
		
		if(type < 256)
		{
			// Simple op
			Token_op* o = new Token_op(new String(lval, len));
			copy_state(o, this);
			mt_lval[mt_count].token_op = o;
		}
		else switch(type)
		{
			case INT:
				i = new Token_int(strtol(lval, 0, 0), new String(lval, len));
				copy_state(i, this);
				mt_lval[mt_count].token_int = i;
				break;
			case STRING:
				s = new Token_string(new String(lval, len), new String(lval, len));
				copy_state(s, this);
				mt_lval[mt_count].token_string = s;
				break;
			default:
				mt_lval[mt_count].string = new String(lval, len);
				break;
		};
	}
	else
	{
		mt_lval[mt_count].object = NULL;
	}

	mt_count++;
}

void PHP_context::schedule_return(long type, string& s)
{
	schedule_return(type, s.c_str(), s.size());
}

