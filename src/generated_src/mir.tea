{-
 - phc -- the open source PHP compiler
 - See doc/license/README.license for licensing information
 -
 - Definition of the MIR.
 -
 - The MIR is slightly lower than the HIR, and includes concepts
 - which we use for code generation, but are not PHP, such as GOTOs,
 - Labels, and features such as exception targets and break targets.
 -
 -}

{-
	Configuration
-}

output_dir "src/generated";
prefix "MIR";
external class "Object";
external class "IR::Node";
external class "IR::PHP_script";
external class "IR::FOREIGN";
use list "List";
use string "String";
use namespace "MIR";

{-
   Top-level structure	
-}

PHP_script ::= Statement* ;

Statement ::=
     Class_def | Interface_def | Method
	| Class_alias | Interface_alias | Method_alias
	| Return | Static_declaration | Global
	| Try | Throw
	| Assign_var | Assign_var_var | Assign_array | Assign_next | Assign_field
	| Eval_expr | Pre_op
	| Unset
	| Label | Goto | Branch
	| Foreach_next | Foreach_reset | Foreach_end
	-- Foreign represents a construct from another IR that does not have a
	-- natural representation in this IR.
	| FOREIGN<IR::Node*>
	;

{-
	Class and method definitions
-}

Class_def ::= 
   Class_mod CLASS_NAME extends:CLASS_NAME? implements:INTERFACE_NAME* Member* ;
Class_mod ::= "abstract"? "final"? ;

Interface_def ::= INTERFACE_NAME extends:INTERFACE_NAME* Member* ;

Member ::= Method | Attribute ;

Method ::= Signature Statement*? ;
-- Pass_rest_by_ref is so that we can fully model ZEND_INTERNAL_FUNCTIONs as Signatures
Signature ::= Method_mod pass_rest_by_ref:"rest_by_ref"? return_by_ref:"&"? METHOD_NAME Formal_parameter* ;
Method_mod ::= "public"? "protected"? "private"? "static"? "abstract"? "final"? ;
Formal_parameter ::= Type is_ref:"&"? var:Name_with_default ;
Type ::= CLASS_NAME? ;

Attribute ::= Attr_mod var:Name_with_default ;
Attr_mod ::= "public"? "protected"? "private"? "static"? "const"?  ;

Name_with_default ::= VARIABLE_NAME default_value:Static_value? ; -- "default" is a keyword in C++

Class_alias ::= alias:CLASS_NAME CLASS_NAME ;
Interface_alias ::= alias:INTERFACE_NAME INTERFACE_NAME ;
Method_alias ::= alias:METHOD_NAME METHOD_NAME ;

{-
   Statements
-}

-- It is not possible to return by reference unless the function is declared
-- to return by reference. We may therefore return a VARIABLE_NAME here.
Return ::= Rvalue ;

Static_declaration ::= var:Name_with_default ;
Global ::= Variable_name ;

Try ::= Statement* catches:Catch* ;
Catch ::= CLASS_NAME VARIABLE_NAME Statement* ;
Throw ::= VARIABLE_NAME ;

Assign_var     ::=			lhs:VARIABLE_NAME								is_ref:"&"? rhs:Expr ;
Assign_field	::= Target	Field_name										is_ref:"&"? rhs:Rvalue ;
Assign_array   ::=			lhs:VARIABLE_NAME index:Rvalue			is_ref:"&"? rhs:Rvalue ;
Assign_var_var ::=			lhs:VARIABLE_NAME						      is_ref:"&"? rhs:Rvalue ;
Assign_next		::=			lhs:VARIABLE_NAME								is_ref:"&"? rhs:Rvalue ;

Pre_op ::= OP VARIABLE_NAME ;

-- Some exprs can be invoked with and without a lhs
Eval_expr ::= Expr ;

-- Unset requires its paramters not be shredded.
Unset ::= Target? Variable_name array_indices:Rvalue* ;

-- You get different results if you shred an isset on a string.
Isset ::= Target? Variable_name array_indices:Rvalue* ;

{-
   Expressions
-}

Expr ::=
	  Cast | Unary_op | Bin_op
	| Constant | Instanceof
	| Method_invocation | New
	| Rvalue 
	| Variable_name | Array_access | Field_access
	| Array_next
	| FOREIGN<IR::Node*>
	-- MIR only
	| Isset
	| Foreach_has_key | Foreach_get_key | Foreach_get_val
	| Param_is_ref
	;

Literal ::= INT<long> | REAL<double> | STRING<String*> | BOOL<bool> | NIL<> ;

{-
 - Use Rvalue anywhere that the access is read-only, and a literal might be
 - used just as easily as a VARIABLE_NAME. Don't use them where they could be
 - immediately folded to something better, for example, in a Unary_op or a
 - Field_access.
 -}
Rvalue ::= Literal | VARIABLE_NAME ;

Field_access ::= Target Field_name ;
Array_access ::= VARIABLE_NAME index:Rvalue ;
Array_next   ::= VARIABLE_NAME ; -- $x =& $arr[];

Cast     ::= CAST VARIABLE_NAME ;
Unary_op ::= OP VARIABLE_NAME ;
Bin_op   ::= left:Rvalue OP right:Rvalue ;

Constant ::= CLASS_NAME? CONSTANT_NAME ;

Instanceof ::= VARIABLE_NAME Class_name ;

Target ::= VARIABLE_NAME | CLASS_NAME ;

Method_invocation ::= Target? Method_name Actual_parameter* ;
New ::= Class_name Actual_parameter* ;

Actual_parameter ::= is_ref:"&"? Rvalue ;


Method_name ::= METHOD_NAME | Variable_method ;
Variable_name ::= VARIABLE_NAME | Variable_variable ;
Class_name ::= CLASS_NAME | Variable_class ;
Field_name ::= FIELD_NAME | Variable_field ;

Variable_method ::= VARIABLE_NAME ;
Variable_variable ::= VARIABLE_NAME ;
Variable_class ::= VARIABLE_NAME ; 
Variable_field ::= VARIABLE_NAME ; 

{- 
 - Static_values represent the constaints on initializers for class attributes,
 - and similar structures. They are required to be literals, constants, or
 - arrays whose keys and values are also Static_values.
 -}

Static_value ::= Literal | Static_array | Constant ;
 
Static_array      ::= Static_array_elem* ;
Static_array_elem ::= key:Static_array_key? is_ref:"&"? val:Static_value ;
Static_array_key  ::= Literal | Constant ; 

{-
   MIR constructs (without a PHP equivalent)
-}

Branch ::= VARIABLE_NAME iftrue:LABEL_NAME iffalse:LABEL_NAME;
Goto ::= LABEL_NAME ;
Label ::= LABEL_NAME ;

Foreach_reset ::= array:VARIABLE_NAME iter:HT_ITERATOR ;
Foreach_next ::= array:VARIABLE_NAME iter:HT_ITERATOR ;
Foreach_end ::= array:VARIABLE_NAME iter:HT_ITERATOR ;
Foreach_has_key ::= array:VARIABLE_NAME iter:HT_ITERATOR ;
Foreach_get_key ::= array:VARIABLE_NAME iter:HT_ITERATOR ;
Foreach_get_val ::= array:VARIABLE_NAME iter:HT_ITERATOR ;

{-
 - In order to be able to shred method_invocations, we must know if a parameter
 - is passed by reference. Very ofen, we do not know this at compile-time, so
 - we add a primitive with which to predicate it. Param_is_ref checks if the nth parameter
 - of Method_invocation in passed by reference. We can then shred the
 - actual_parameter based on the predicated assumption.
 - 
 - An actual_parameter can have is_ref set to true. In that case, we replace
 - Param_is_ref with true.
 -}
Param_is_ref ::= Target? Method_name PARAM_INDEX<int> ;

{-
 - Additional structure 
 -}

Identifier ::=
	  INTERFACE_NAME | CLASS_NAME | METHOD_NAME | VARIABLE_NAME | FIELD_NAME
	  | CAST | OP | CONSTANT_NAME | LABEL_NAME | HT_ITERATOR
	;  

{-
 - Extra attributes and methods (mixin code)
 -}

#include <iostream>
#include <sstream>
#include <iomanip>
#include "lib/error.h"
#include "lib/Object.h"
#include "lib/List.h"
#include "lib/String.h"
#include "lib/Boolean.h"
#include "lib/Integer.h"
#include "lib/AttrMap.h"
#include "process_ir/IR.h"
#include "process_ir/Foreach.h"

class Node : IR::Node
{
public:
	void clone_mixin_from(Node* in)
	{
		attrs->clone_all_from (in->attrs);
	}

	void assert_mixin_valid()
	{
		assert(attrs != NULL);

		string key;
		Object* value;
		foreach (tie (key, value), *this->attrs)
		{
			if (key != "phc.line_number"
				&& key != "phc.filename")
			{
				assert(value != NULL);
			}
		}
	}
};

class PHP_script : IR::PHP_script {};

class Signature 
{
public:
	Signature(const char* name) 
	{
		this->method_mod = Method_mod::new_PUBLIC();
		this->pass_rest_by_ref = false;
		this->return_by_ref = false;
		this->method_name = new METHOD_NAME(name);
		this->formal_parameters = new Formal_parameter_list;
	}

	// Returns if the parameter at index PARAM_INDEX is passed by reference.
	bool is_param_passed_by_ref (int param_index)
	{
		if (this->formal_parameters->size () > (unsigned int)(param_index))
			return formal_parameters->at (param_index)->is_ref;
		else
			return this->pass_rest_by_ref;
	}
};

class Method_mod 
{
public:
	Method_mod()
	{
		is_public = false;
		is_protected = false;
		is_private = false;
		is_static = false;
		is_abstract = false;
		is_final = false;
	}

	Method_mod(Method_mod* a, Method_mod* b) 
	{
		this->is_public 		= a->is_public		|| b->is_public;
		this->is_protected	= a->is_protected	|| b->is_protected;
		this->is_private		= a->is_private	|| b->is_private;
		this->is_static		= a->is_static		|| b->is_static;
		this->is_abstract		= a->is_abstract	|| b->is_abstract;
		this->is_final			= a->is_final		|| b->is_final;
	}

	static Method_mod* new_PUBLIC() 
	{
		return new Method_mod(true, false, false, false, false, false);		
	}

	static Method_mod* new_PROTECTED() 
	{ 
		return new Method_mod(false, true, false, false, false, false);		
	}

	static Method_mod* new_PRIVATE() 
	{ 
		return new Method_mod(false, false, true, false, false, false);		
	}

	static Method_mod* new_STATIC() 
	{ 
		return new Method_mod(false, false, false, true, false, false);		
	}

	static Method_mod* new_ABSTRACT() 
	{ 
		return new Method_mod(false, false, false, false, true, false);		
	}

	static Method_mod* new_FINAL() 
	{ 
		return new Method_mod(false, false, false, false, false, true);		
	}
};

class Class_def
{
public:
	Class_def(Class_mod* mod) 
	{
		this->class_mod = mod;
		this->class_name = NULL;
		this->extends = NULL;
		this->implements = new INTERFACE_NAME_list;
		this->members = new Member_list;
	}

	Class_def(const char* name)
	{
		this->class_mod = new Class_mod(false, false);
		this->class_name = new CLASS_NAME(new String(name));
		this->extends = NULL;
		this->implements = new INTERFACE_NAME_list;
		this->members = new Member_list;
	}

	void add_member(Member* member) 
	{
		this->members->push_back(member);
	}

	// Returns NULL if the method could not be found
	Method* get_method(const char* name)
	{
		foreach (Member* m, *members)
		{
			Method* method = dynamic_cast<Method*>(m);
			if(method && *method->signature->method_name->value == name)
				return method;
		}

		return NULL;
	}
};

class Assign_var
{
public:
	Assign_var (VARIABLE_NAME* lhs, Expr* rhs)
	{
		this->lhs = lhs;
		this->is_ref = false;
		this->rhs = rhs;
	}

	Assign_var (VARIABLE_NAME* lhs, bool is_ref, Expr* rhs)
	{
		this->lhs = lhs;
		this->is_ref = is_ref;
		this->rhs = rhs;
	}
};

class Method_invocation
{
public:
	Method_invocation(const char* name, Actual_parameter* arg) 
	{ 
		this->target = NULL;
		this->method_name = new METHOD_NAME(name);
		this->actual_parameters = new Actual_parameter_list (arg);
	}

	Method_invocation(METHOD_NAME* name, Actual_parameter* arg) 
	{ 
		this->target = NULL;
		this->method_name = name; 
		this->actual_parameters = new Actual_parameter_list (arg);
	}
};

class METHOD_NAME
{
public:
	METHOD_NAME(const char* name)
	{
		this->value = new String (name);
	}
};

class CLASS_NAME
{
public:
	CLASS_NAME(const char* name)
	{
		this->value = new String (name);
	}
};

class VARIABLE_NAME
{
public:
	VARIABLE_NAME (String* name)
	{
		this->value = name;
	}

	VARIABLE_NAME (const char* name)
	{
		this->value = new String (name);
	}
};

class Field_access
{
public:
	Field_access (Target* target, const char* name)
	{
		this->target = target;
		this->field_name = new FIELD_NAME (name);
	}
};

class FIELD_NAME
{
public:
	FIELD_NAME (const char* name)
	{
		this->value = new String (name);
	}
};

class Formal_parameter
{
public:
	Formal_parameter(Type* type, VARIABLE_NAME* name) 
	{
		this->type = type;
		this->is_ref = false;
		this->var = new Name_with_default(name, NULL);
	}

	Formal_parameter(Type* type, bool is_ref, VARIABLE_NAME* name) 
	{ 
		this->type = type;
		this->is_ref = is_ref;
		this->var = new Name_with_default(name, NULL);
	}
};

class Attr_mod
{
public:
	Attr_mod()
	{
		is_public = false;
		is_protected = false;
		is_private = false;
		is_static = false;
		is_const = false;
	}

	Attr_mod(Method_mod* mm) 
	{
		if(mm->is_final)
			phc_error("The final modifier is only allowed for methods", mm);

		this->is_public = mm->is_public;
		this->is_protected = mm->is_protected;
		this->is_private = mm->is_private;
		this->is_static = mm->is_static;
		this->is_const = false;
	}

	static Attr_mod* new_PUBLIC() 
	{
		return new Attr_mod(true, false, false, false, false);
	}

	static Attr_mod* new_PROTECTED() 
	{ 
		return new Attr_mod(false, true, false, false, false);
	}

	static Attr_mod* new_PRIVATE() 
	{
		return new Attr_mod(false, false, true, false, false);
	}

	static Attr_mod* new_STATIC() 
	{
		return new Attr_mod(false, false, false, true, false);
	}
	
	static Attr_mod* new_CONST() 
	{
		return new Attr_mod(false, false, false, false, true);
	}
};

class Bin_op
{
public:
	Bin_op(VARIABLE_NAME* left, VARIABLE_NAME* right, const char* op) 
	{
		this->left = left;
		this->op = new OP(new String(op));
		this->right = right;
	}
};

class Pre_op
{
public:
	Pre_op(VARIABLE_NAME* variable_name, const char* op) 
	{
		this->variable_name = variable_name;
		this->op = new OP(new String(op));
	}
};

class Unary_op
{
public:
	Unary_op(VARIABLE_NAME* variable_name, const char* op) 
	{
		this->variable_name = variable_name;
		this->op = new OP(new String(op));
	}
};

class Cast
{
public:
	Cast(const char* type, VARIABLE_NAME* variable_name) 
	{
		this->cast = new CAST(new String(type));
		this->variable_name = variable_name;
	}
};

class Identifier
{
public:
	virtual String* get_value_as_string() = 0;
};

class Literal
{
public:
	// We wish to match on this, so it cannot be pure virtual
	virtual String* get_value_as_string() { assert (0); }
};

class INT
{
private:

	// Constructors can't call virtual functions, so we create a non-virtual to
	// do the work. This is then called by the virtual function, and is also
	// safely called from the constructor.
	String* _get_value_as_string()
	{
		std::ostringstream os;
		os << value;
		return new String(os.str());
	}

public:
	virtual String* get_value_as_string()
	{
		return _get_value_as_string ();
	}

	bool match_value (INT* that)
	{
		return (that->value == value);
	}
};

class REAL
{
private:

	// See comment in INT::_get_value_as_string ()
	String* _get_value_as_string()
	{
		std::ostringstream os;
		// setprecision(20) outputs as many digits as required, with
		// a maximum of 20
		os << std::setprecision(20) << value;
		// unfortunately, that means that if no digits are required at
		// all (after the decimal point), the decimal point is left out
		// completely; setting the "showpoint" flag fixes this, but then
		// the STL _always_ shows all 20 digits, which is not what we 
		// want either. Hence, we insert the ".0" manually if necessary:
		string str = os.str();
		if(str.find('.') >= str.size())
			str.append(".0");

		return new String(str);
	}

public:
	virtual String* get_value_as_string()
	{
		return _get_value_as_string ();
	}

	bool match_value (REAL* that)
	{
		return (that->value == value);
	}
};

class BOOL
{
private:
	// See comment in INT::_get_value_as_string ()
	String* _get_value_as_string()
	{
		if(value)
			return new String("True");
		else
			return new String("False");
	}

public:
	virtual String* get_value_as_string()
	{
		return _get_value_as_string ();
	}

	bool match_value (BOOL* that)
	{
		return (that->value == value);
	}
};

class STRING
{
public:
	virtual String* get_value_as_string()
	{
		return value;
	}

	bool is_value_valid()
	{
		return value != NULL;
	}

	String* clone_value()
	{
		return value->clone();
	}

	bool match_value (STRING* that)
	{
		return (*that->value == *value);
	}
};

class NIL
{
public:
	virtual String* get_value_as_string()
	{
		return new String("NULL");
	}
};

class FOREIGN : IR::FOREIGN
{
public:
	bool equals_value (FOREIGN* that)
	{
		return value->equals (that->value);
	}

	IR::Node* get_value()
	{
		return value;
	}
};

class PARAM_INDEX
{
public:
	String* get_value_as_string()
	{
		return new String (boost::lexical_cast<string> (value));
	}
};
