# 1: local zvp
# 2: result (zvp)
get_st_entry_no_st:
	(declare_p (ZVPP %2%))
	(if
		(equals (ZVP %1%) (null))
		[
			(assign_zvp (ZVP %1%) (uninit))
			(inc_ref (ZVP %1%))
		]
		[])
	(assign_zvpp 
		(ZVPP %2%) 
		(ref (ZVP %1%)))

# 1: scope/symtable to look in (local/global)
# 2: name of variable
# 3: result (zvp)
get_st_entry:
	(declare_p (ZVPP %3%))
	(symtable_fetch 
		(SYMTABLE %1%) 
		(STRING %2%)
		(ZVPP %3%))
	(if 
		(equals_p (ZVPP %3%) (null))
		[
			(assign_zvpp (ZVPP %3%) (ref (uninit)))
			(inc_ref (uninit))
			(symtable_insert
				(SYMTABLE %1%)
				(STRING %2%)
				(ZVPP %3%))
		]
		[])

# 1: local zvp
# 2: result (zvp)
read_var_no_st:
	(declare (ZVP %2%))
	(if (equals (ZVP %1%) (null))
		[ (assign_zvp (ZVP %2%) (uninit)) ]
		[ (assign_zvp (ZVP %2%) (ZVP %1%)) ]
	)


# 1: scope/symtable
# 2: variable name
# 3: result (zvp)
read_var:
	(declare_p (ZVPP %3%))
	(declare (ZVP %3%))
	(symtable_fetch 
		(SYMTABLE %1%) 
		(STRING %2%)
		(ZVPP %3%))
	(if (equals_p (ZVPP %3%) (null))
		[ (assign_zvp (ZVP %3%) (uninit)) ]
		[ (assign_zvp (ZVP %3%) (deref (ZVPP %3%))) ])

# 1: scope/symtable
# 2: index (zvp)
# 3: result (zvp)
#read_var_var:
#	(declare (ZVP %3%))
#	(CODE "char* str;")
#	(CODE "int len;")
#	(intrinsic (NAME get_string_val) (blank)
#		[param (ZVP %2%)]
#		[param (NAME str) (NAME len)])
#	(CODE "int hash = zend_get_hash_value (str, len);")
#	(intrinsic (NAME read_var) (ZVP %3%) 
#		[param (SYMTABLE %1%) (NAME str) (NAME len) (NAME hash) (tsrm)]
#		[param])
#
#
# 1: scope/symtable
# 2: index (zvp)
# 3: result (zvpp)
#get_var_var:
#	(declare_p (ZVPP %3%))
#	(CODE "char* str;")
#	(CODE "int len;")
#	(intrinsic (NAME get_string_val) (blank)
#		[param (ZVP %2%)]
#		[param (NAME str) (NAME len)])
#	(CODE "int hash = zend_get_hash_value (str, len);")
#	(intrinsic (NAME get_st_entry) (ZVPP %3%)
#		[param (SYMTABLE %1%) (NAME str) (NAME len) (NAME hash) (tsrm)]
#		[param])
#
# ------------ Comments only allowed before a declaration.
# 1: lhs (zvpp)
# 2: rhs (zvp)
write_var:
	(if
		(not (equals (deref (ZVPP lhs)) (ZVP rhs)))
		[
			(if (not (is_ref (deref (ZVPP %1%))))
				[
					(destruct (ZVPP %1%))
					(if (is_ref (ZVP %2%))
						[ (assign_zvp (deref (ZVPP %1%)) (clone (ZVP %2%))) ]
						[
							(inc_ref (ZVP %2%))
							(assign_zvp (deref (ZVPP %1%)) (ZVP %2%))
						])
				]
				[ (overwrite (deref (ZVPP %1%)) (ZVP %2%)) ])
		]
		[])


# 1: variable to separate (zvpp)
sep_copy_on_write:
	(if (in_copy_on_write (deref (ZVPP %1%)))
		[ 
			(declare (ZVP old))
			(assign_zvp (ZVP old) (deref (ZVPP %1%)))
			(assign_zvp (deref (ZVPP %1%)) (clone (ZVP old)))
			(destruct (ref (ZVP old)))
		]
		[])


# 1: target
# 2: value to copy into target
copy_into_ref:
	 (set_is_ref (deref (ZVPP %2%)) 1)
	 (inc_ref (deref (ZVPP %2%)))
	 (destruct (ZVPP %1%))
	 (assign_zvp (deref (ZVPP %1%)) (deref (ZVPP %2%)))

